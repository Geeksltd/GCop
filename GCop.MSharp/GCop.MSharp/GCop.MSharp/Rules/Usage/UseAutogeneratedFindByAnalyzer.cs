namespace GCop.MSharp.Rules.Usage
{
    using Core;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using Microsoft.CodeAnalysis.Diagnostics;
    using System.Linq;

    [DiagnosticAnalyzer(LanguageNames.CSharp)]
    public class UseAutogeneratedFindByAnalyzer : GCopAnalyzer<SyntaxNodeAnalysisContext, SyntaxKind>
    {
        protected override SyntaxKind Kind => SyntaxKind.MethodDeclaration;

        protected override RuleDescription GetDescription()
        {
            return new RuleDescription
            {
                ID = "515",
                Category = Category.Usage,
                Severity = DiagnosticSeverity.Warning,
                Message = "Mark {0} in M# as Unique. It will then generate the FindBy{0} method for you."
            };
        }

        protected override void Analyze(SyntaxNodeAnalysisContext context)
        {
            NodeToAnalyze = context.Node;

            var method = NodeToAnalyze as MethodDeclarationSyntax;
            if (method.GetName().IsEmpty() || !method.GetName().StartsWith("FindBy")) return;

            var propertyName = method.GetName().Remove("FindBy");

            var methodInfo = context.SemanticModel.GetDeclaredSymbol(method);
            if (!methodInfo.ContainingType?.BaseType?.BaseType?.ToString().StartsWith("MSharp.Framework.Entity") ?? true) return;

            if (methodInfo.ContainingType.GetMembers().Any(it => it.Name == propertyName && it.Kind == SymbolKind.Property))
            {
                ReportDiagnostic(context, method.Identifier, propertyName);
            }
        }
    }
}
